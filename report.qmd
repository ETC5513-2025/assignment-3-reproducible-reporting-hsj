---
title: "Education & Career Success"
author: "Tran Dang Huy, Sia Chawla Chawla, Jiaqi Xu"

editor: source
embed-resources: true


# set report format 
format:
  pdf:
    toc: true
    theme: journal
    margin-top: 20mm
    margin-bottom: 25mm
    margin-left: 25mm
    margin-right: 25mm

# code chunk and result settings, globally, (method 1)
execute: 
  echo: false      # hide code chunk
  eval: true       # run the code
  include: true    # show output
  cache: false     
  warning: false
  message: false
  fig-align: "center"   # plot's position: left, center, or right
  fig-width: 6          # plot's width
  fig-height: 4         # plot's height
  out-width: "65%"      # % width of inserted image

# allow sectioning
number-sections: true
section-divs: true
section-depth: 3
---


```{r}
library(knitr)
library(tidyverse)
library(randomForest)
library(rsample)
library(rpart)
library(rpart.plot)
```


# Executive summary {#sec-summary}
(Maximum of 4 sentences)


# Introduction {#sec-intro}
(Maximum 10 sentences)


Graduates today face many questions about how their experiences influence their careers. Grades alone may not determine who gets the most job opportunities. This report explores which student experiences are linked to receiving more job offers?

To answer these questions, we use a dataset of 5,000 recent graduates from Kaggle. It includes information about students’ academic background, personal demographic, and career-related outcomes. Rather than testing predefined theories, this project takes an open-ended, pattern-oriented approach. The aim is to explore which types of experiences appear most consistently linked to job outcomes and personal satisfaction.


# Methodology {#sec-method}
(Maximum 300 words; Should include a figure and a table and those must be referenced in the text and have adequate captions)


This study uses an exploratory approach to investigate how students’ academic and experiential attributes may relate to early career outcomes. The dataset includes 5,000 graduate records collected from Kaggle.

```{r}
data <- read.csv("data/education_career_success.csv")
```

```{r}
# convert text liked variable into categorical variable
data <- data %>%
  dplyr::filter(Gender %in% c("Male", "Female")) %>%
  mutate(across(where(is.character), as.factor))

# convert ordinal variable to ordered factor 
data <- data %>%
  mutate(
    Career_Satisfaction = factor(Career_Satisfaction, ordered = TRUE),
    Soft_Skills_Score = factor(Soft_Skills_Score, ordered = TRUE),
    Networking_Score = factor(Networking_Score, ordered = TRUE),
    Current_Job_Level = factor(Current_Job_Level,
                               levels = c("Entry", "Mid", "Senior", "Executive"), ordered = TRUE),
    Work_Life_Balance = factor(Work_Life_Balance, order = TRUE),
  )
```

```{r}
#| label: tbl-data
#| tbl-cap: "Dataset variables and their descriptions"

data %>% glimpse()
```

We began by examining the structure of the input variables. As shown in @tbl-data, the dataset contains a mix of continuous (e.g., `SAT_Score`), ordinal (e.g., `Certifications`), and categorical (e.g., `Field_of_Study`) features, with a wide range of unique values. This diversity limits the applicability of simple linear models and supports the use of flexible methods that can accommodate mixed data types and non-linear relationships.

We also analysed the outcome variable. As visualised in @fig-outcomeskew, variable `Job_Offers` is relatively well-distributed and show minimal skewness.

```{r}
#| label: fig-outcomeskew
#| fig-cap: "Distributions of Outcome Variable"

data %>%
  dplyr::select(Job_Offers) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
  ggplot(aes(x = Value)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
  facet_wrap(~ Variable, scales = "free") +
  theme_minimal() +
  labs(x = "Value", y = "Count")
```

Given that `Job_Offers` is a count variable, we select random forest model, a non-parametric model capable of capturing complex relationships without strong distributional assumptions. 



# Results {#sec-result}
(Maximum 200 words. Should include either a figure or a table.)

## Get the most important variables for Job_Offers {#sec-rfx}

```{r}

outcome_var <- "Job_Offers"

predictors <- data %>%
  dplyr::select(-Student_ID, -Career_Satisfaction, -Work_Life_Balance) %>%
  dplyr::select(-all_of(outcome_var)) %>%
  names()

form <- as.formula(paste(outcome_var, "~", paste(predictors, collapse = " + ")))

set.seed(3)
rf_model <- randomForest(form, data = data, importance = TRUE)

```

```{r}
#| label: fig-rfimportance
#| fig-cap: "Importance of Predictors for Number of Job Offers Received"

rf_imp_df <- importance(rf_model, type = 1) %>%
  as.data.frame() %>%
  rownames_to_column("Variable") %>%
  rename(Importance = `%IncMSE`) %>%  
  arrange(desc(across(where(is.numeric))))

ggplot(rf_imp_df, aes(x = reorder(Variable, Importance), y = Importance)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  theme_minimal() +
  labs(
    x = "Predictor",
    y = "% Increase in Accuracy"
  )
```

@fig-rfimportance shows the relative importance of predictors in the random forest model. Variables such as number of complete internships and projects, SAT score, and gender were most associated with the number of job offers receiving by the student. Negative importance scores (e.g., for Age) suggest minimal or noisy contributions to model performance.


```{r}
data <- data %>% mutate(Job_Offers = factor(Job_Offers, ordered = TRUE))
tree_formula <- Job_Offers ~ Internships_Completed + High_School_GPA + Field_of_Study + Networking_Score + Projects_Completed
tree_model <- rpart(tree_formula, data = data, method = "class", control = rpart.control(cp = 0.005, minsplit = 50))
rpart.plot(tree_model,
           type = 3,        # Show split labels and probabilities
           extra = 101,     # Show number of obs and predicted value
           box.palette = "Blues",
           main = "Decision Tree: Predicting Number of Job Offers")
```





# Discussion, conclusion and recommendations {#sec-discuss}


# Reference section {#sec-ref}
(Include at least 1 reference.)
 
